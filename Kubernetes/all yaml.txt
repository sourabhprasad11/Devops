---------
mysql.yml
---------

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 3306
  selector:
    app: mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_USER
          value: root
        - name: MYSQL_ROOT_PASSWORD
          value: delta123
        - name: MYSQL_DATABASE
          value: djangodb
        ports:
        - name: tcp
          containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mypvc

################################################################################

-----------
backend.yml
-----------

apiVersion: v1
kind: Service
metadata:
  name: my-svc
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  selector:
    matchLabels:
      app: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: 423034607203.dkr.ecr.ap-south-1.amazonaws.com/backend:backend1
          imagePullPolicy: Always
          ports:
            - name: tcp
              containerPort: 8000



#################################################################################

-----------------
frontend.yml
-----------------

apiVersion: v1
kind: ConfigMap
metadata:
  name: django-conf
data:
  django.conf: |
                server {
                listen 80;
                server_name _;
                location = /favicon.ico {
                access_log off;
                log_not_found off;
                 }
                location /etc/nginx/conf.d/static/ {
                autoindex on;
                alias /etc/nginx/conf.d/static/;
                 }
                location / {
                proxy_set_header Host $http_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_pass http://my-svc:8000;
                 }
                }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deploy
  labels:
    app: frontend
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: frontend
        image: 423034607203.dkr.ecr.ap-south-1.amazonaws.com/frontendcomp:frontend5
        ports :
        - name: http
          containerPort: 80
        volumeMounts:
        - name: django
          mountPath: "/etc/nginx/conf.d/"
          readOnly: true
      volumes:
      - name: django
        configMap:
          name: django-conf
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
#   nodePort: 30010
  selector:
    app: nginx

#############################################################################


----------
ingree.yml
----------

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: nginx-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
# IngressClassName: nginx
  rules:
  - host: ex.south-1a.tk
    http:
      paths:
      - path: /
        backend:
          serviceName: frontend
          servicePort: 80


#############################################################################

-------------
Route 53
-------------

load balancer is created .create record in route 53 with cname type having load balancer and 
dns name specified in the ingress.yml

